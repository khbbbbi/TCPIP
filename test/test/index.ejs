<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>Socket.IO 예제</title>
</head>
<style>
    #container {
        width: 400px;
        height: 400px;
        border: 1px solid black;
        background: ivory;
    }
    #chatView {
        height: 90%;
        overflow-y: scroll;
    }
    #chatForm {
        height: 10%;
        border-top: 1px solid black;
        text-align: center;
    }
    #msg {
        width: 80%;
        height: 32px;
        border-radius: 8px;
    }
    #send {
        width: 16%;
        height: 34px;
        border-radius: 50px;
        background: black;
        color: white;
    }
    .msgLine {
    margin: 15px;
}
.msgBox {
    border: 1px solid black;
    background: skyblue;
    padding: 2px 5px;
    border-radius: 10px;
}
</style>
<body>
    <div id="container">
        <p id="usercount"></p>
        <div id="chatView">
            <p></p>
        </div>
        <form id="msgform">
            <input type="text" id="msginput" autocomplete="off">
            <input type="submit" id="send" value="전송">
        </form>
        <div class = "stopwatch">
            <!-- <div class="stopwatch-container"> -->
              <div class = "stopwatch_time">
                <h1 class="display">00:00</h1>
                <button class="start-btn" type="button">Start</button>
                <button class="stop-btn" type="button">Stop</button>
                <button class="reset-btn" type="button">Reset</button>
              </div>
              <div class = "stopwatch_list">
                <p>안녕</p>
              </div>
            </div>
            <div>
              <span>Time Lap</span>
                <ul class="timelap-list">
                </ul>
            </div>
        
            <script src="/socket.io/socket.io.js"></script>
            <script>
                var socket = io();
                var msgform = document.getElementById('msgform');
                // socket.on 함수로 서버에서 전달하는 신호를 수신
                socket.on('usercount', (count) => {
                    var userCounter = document.getElementById('usercount');
                    userCounter.innerText = "현재 " + count + "명이 서버에 접속해있습니다.";
                });
        
                                // 메시지 수신시 HTML에 메시지 내용 작성
                socket.on('message', (msg) => {
                    var messageList = document.getElementById('chatView');
                    var messageTag = document.createElement("p");
                    messageTag.innerText = msg;
                    messageList.appendChild(messageTag);
                });
        
                msgform.onsubmit = (e) => {
                    e.preventDefault();
                    var msginput = document.getElementById('msginput');
        
                    // socket.emit으로 서버에 신호를 전달
                    socket.emit('message', msginput.value);
        
                    msginput.value = "";
                };

      //자바스크립트를 이용한 스탑와치 기능 구현하기
      //  1. start btn을 누르면 초단위로 스탑와치 타이머가 시작된다.
      //  2. stop btn을 누르면 타이머가 멈춘다.
      //  3. reset btn을 누르면 time lap에 시간이 추가되고 display는 00:00으로 리셋된다.
      const display = document.querySelector('.display');
      
      let intervalId = 0,
          minutes = 0,
          seconds = 0,
          displayArr = display.innerText.split(':');
      
      function startBtnHandler() {
        const startBtn = document.querySelector('.start-btn');
      
        startBtn.addEventListener('click', () =>{


          intervalId = setInterval(() => {
            if (!parseInt(displayArr[1])) {
              seconds += 1;
              if (seconds > 59) {
                seconds = 0;
                minutes += 1;
              }
              display.innerText = `${minutes < 10 ? `0${minutes}` : minutes}:${
                seconds < 10 ? `0${seconds}` : seconds}`;
            } else {
              seconds = parseInt(displayArr[1]);
              seconds += 1;
              if (seconds > 59) {
                seconds = 0;
                minutes += 1;
              }
              display.innerText = `${minutes < 10 ? `0${minutes}` : minutes}:${
                seconds < 10 ? `0${seconds}` : seconds}`;
            }
            
          }, 1000)
          
      })
      }
      
      function stopBtnHandler() {
        const stopBtn = document.querySelector('.stop-btn');
        stopBtn.addEventListener('click', () => {
          clearInterval(intervalId);
        })
        minutes = parseInt(displayArr[0]);
        seconds = parseInt(displayArr[1]);
      }
      
      function resetBtnHandler() {
        const resetBtn = document.querySelector('.reset-btn'),
              display = document.querySelector('.display');
        resetBtn.addEventListener('click', () => {
          const timelapList = document.querySelector('.timelap-list');
          const li = document.createElement('li');
          li.innerText = display.innerText;
          timelapList.appendChild(li);
          display.innerText = `00:00`;
          clearInterval(intervalId);
          seconds = 0;
          minutes = 0;
        })
      }
      
      function init() {
        startBtnHandler();
        stopBtnHandler();
        resetBtnHandler();
      }
      
      init();
      
            </script>
    </div>
   
</body>
</html>